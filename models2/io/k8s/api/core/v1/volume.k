"""
This is the _volume module in io.k8s.api.core.v1 package.
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""


schema Volume:
    r"""
    Volume represents a named volume in a pod that may be accessed by any container in the pod.

    Attributes
    ----------
    awsElasticBlockStore : io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource, default is Undefined, optional
        awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    azureDisk : io.k8s.api.core.v1.AzureDiskVolumeSource, default is Undefined, optional
        azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    azureFile : io.k8s.api.core.v1.AzureFileVolumeSource, default is Undefined, optional
        azureFile represents an Azure File Service mount on the host and bind mount to the pod.
    cephfs : io.k8s.api.core.v1.CephFSVolumeSource, default is Undefined, optional
        cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
    cinder : io.k8s.api.core.v1.CinderVolumeSource, default is Undefined, optional
        cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    configMap : io.k8s.api.core.v1.ConfigMapVolumeSource, default is Undefined, optional
        configMap represents a configMap that should populate this volume
    csi : io.k8s.api.core.v1.CSIVolumeSource, default is Undefined, optional
        csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
    downwardAPI : io.k8s.api.core.v1.DownwardAPIVolumeSource, default is Undefined, optional
        downwardAPI represents downward API about the pod that should populate this volume
    emptyDir : io.k8s.api.core.v1.EmptyDirVolumeSource, default is Undefined, optional
        emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    ephemeral : io.k8s.api.core.v1.EphemeralVolumeSource, default is Undefined, optional
        ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.

        Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
           tracking are needed,
        c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
           a PersistentVolumeClaim (see EphemeralVolumeSource for more
           information on the connection between this volume type
           and PersistentVolumeClaim).

        Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.

        Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.

        A pod can use both types of ephemeral volumes and persistent volumes at the same time.
    fc : io.k8s.api.core.v1.FCVolumeSource, default is Undefined, optional
        fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
    flexVolume : io.k8s.api.core.v1.FlexVolumeSource, default is Undefined, optional
        flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
    flocker : io.k8s.api.core.v1.FlockerVolumeSource, default is Undefined, optional
        flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
    gcePersistentDisk : io.k8s.api.core.v1.GCEPersistentDiskVolumeSource, default is Undefined, optional
        gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    gitRepo : io.k8s.api.core.v1.GitRepoVolumeSource, default is Undefined, optional
        gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
    glusterfs : io.k8s.api.core.v1.GlusterfsVolumeSource, default is Undefined, optional
        glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
    hostPath : io.k8s.api.core.v1.HostPathVolumeSource, default is Undefined, optional
        hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    image : io.k8s.api.core.v1.ImageVolumeSource, default is Undefined, optional
        image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine. The volume is resolved at pod startup depending on which PullPolicy value is provided:

        - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails. - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present. - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.

        The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation. A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message. The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field. The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images. The volume will be mounted read-only (ro) and non-executable files (noexec). Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath). The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
    iscsi : io.k8s.api.core.v1.ISCSIVolumeSource, default is Undefined, optional
        iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
    name : str, default is Undefined, required
        name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    nfs : io.k8s.api.core.v1.NFSVolumeSource, default is Undefined, optional
        nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    persistentVolumeClaim : io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource, default is Undefined, optional
        persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    photonPersistentDisk : io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource, default is Undefined, optional
        photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
    portworxVolume : io.k8s.api.core.v1.PortworxVolumeSource, default is Undefined, optional
        portworxVolume represents a portworx volume attached and mounted on kubelets host machine
    projected : io.k8s.api.core.v1.ProjectedVolumeSource, default is Undefined, optional
        projected items for all in one resources secrets, configmaps, and downward API
    quobyte : io.k8s.api.core.v1.QuobyteVolumeSource, default is Undefined, optional
        quobyte represents a Quobyte mount on the host that shares a pod's lifetime
    rbd : io.k8s.api.core.v1.RBDVolumeSource, default is Undefined, optional
        rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
    scaleIO : io.k8s.api.core.v1.ScaleIOVolumeSource, default is Undefined, optional
        scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    secret : io.k8s.api.core.v1.SecretVolumeSource, default is Undefined, optional
        secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    storageos : io.k8s.api.core.v1.StorageOSVolumeSource, default is Undefined, optional
        storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
    vsphereVolume : io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource, default is Undefined, optional
        vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
    """


    awsElasticBlockStore?: io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource

    azureDisk?: io.k8s.api.core.v1.AzureDiskVolumeSource

    azureFile?: io.k8s.api.core.v1.AzureFileVolumeSource

    cephfs?: io.k8s.api.core.v1.CephFSVolumeSource

    cinder?: io.k8s.api.core.v1.CinderVolumeSource

    configMap?: io.k8s.api.core.v1.ConfigMapVolumeSource

    csi?: io.k8s.api.core.v1.CSIVolumeSource

    downwardAPI?: io.k8s.api.core.v1.DownwardAPIVolumeSource

    emptyDir?: io.k8s.api.core.v1.EmptyDirVolumeSource

    ephemeral?: io.k8s.api.core.v1.EphemeralVolumeSource

    fc?: io.k8s.api.core.v1.FCVolumeSource

    flexVolume?: io.k8s.api.core.v1.FlexVolumeSource

    flocker?: io.k8s.api.core.v1.FlockerVolumeSource

    gcePersistentDisk?: io.k8s.api.core.v1.GCEPersistentDiskVolumeSource

    gitRepo?: io.k8s.api.core.v1.GitRepoVolumeSource

    glusterfs?: io.k8s.api.core.v1.GlusterfsVolumeSource

    hostPath?: io.k8s.api.core.v1.HostPathVolumeSource

    image?: io.k8s.api.core.v1.ImageVolumeSource

    iscsi?: io.k8s.api.core.v1.ISCSIVolumeSource

    name: str

    nfs?: io.k8s.api.core.v1.NFSVolumeSource

    persistentVolumeClaim?: io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource

    photonPersistentDisk?: io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource

    portworxVolume?: io.k8s.api.core.v1.PortworxVolumeSource

    projected?: io.k8s.api.core.v1.ProjectedVolumeSource

    quobyte?: io.k8s.api.core.v1.QuobyteVolumeSource

    rbd?: io.k8s.api.core.v1.RBDVolumeSource

    scaleIO?: io.k8s.api.core.v1.ScaleIOVolumeSource

    secret?: io.k8s.api.core.v1.SecretVolumeSource

    storageos?: io.k8s.api.core.v1.StorageOSVolumeSource

    vsphereVolume?: io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource


